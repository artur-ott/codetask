#!/bin/sh
exec scala "$0" "$@"
!#

//import scalaj.http._
import scala.util.matching.Regex
import scala.util.matching.Regex._
import scala.util.control.Exception
import scala.collection.immutable.TreeMap
import scala.collection.mutable.ListBuffer
import scala.io.Source._
import java.util.Base64
import java.nio.charset.StandardCharsets
import javax.net.ssl.HttpsURLConnection
import java.net._
import java.io._

val serverUrl = "http://localhost:9000"
//val serverUrl = "http://141.37.31.18:9000"
//val serverUrl = "https://141.37.31.18:9001"

// helper class json hierarchy
case class Node(key: String, value: Option[String] = None, values: Option[List[Node]] = None) {
  override def toString = value match {
    case Some(v) => "\"%s\":%s".format(key, v)
    case None => values match {
      case Some(vs) => "\"%s\":{%s}".format(key, vs.map(_.toString).mkString(","))
      case None => throw new Exception("missing value / values for" + key)
    }
  }
}

// helper class
case class MatchException(smth:String)  extends Exception(smth)

// helper class
case class HttpR(urlTarget: String) {
  val url = new URL(urlTarget)
  var content: String = null
  var connection: HttpURLConnection = null
  //var connection: HttpsURLConnection = null
  try {
    connection = url.openConnection() match {
      case ip: HttpURLConnection => ip
      //case ip: HttpsURLConnection => ip
      case _ => throw new ClassCastException
    }
  } catch {
    case e: Exception => println(e)
  }
  //connection.setUseCaches(true)
  def method(m: String): HttpR = {
    connection.setRequestMethod(m)
    this
  }
  def property(p: String, v: String): HttpR = {
    connection.setRequestProperty(p, v)
    this
  }
  def data(s: String): HttpR = {
    content = s
    connection.setDoOutput(true)
    this
  }
  override def toString():String = {
    connection.getInputStream().toString
  }
  def send() = {
    try {
      content match {
        case null =>
        case c: String => {
          //val os = connection.getOutputStream()
          //os.writeBytes(content)
          //os.flush()
          val osw = new OutputStreamWriter(connection.getOutputStream())
          val out = new BufferedWriter(osw)
          out.write(c)
          out.close()
        }
      }

      val ips = connection.getInputStream()
      val br = new BufferedReader(new InputStreamReader(ips))
      val response = new StringBuilder()
      var result = new String()
      var line = new String()
      while({line = br.readLine(); line != null}) {
        response.append(line)
        response.append('\n')
      }
      br.close()
      response.toString
    } catch {
      case e: Exception => null
    } finally {
      println("Code: " + connection.getResponseCode())
      println("Message: " + connection.getResponseMessage())
      connection.getResponseCode match {
        case 400 => println("Description: Invalid / malformed data send")
        case 409 => println("Description: Resource already exists")
        case 401 => println("Description: Unathorized request")
        case 404 => println("Description: Resource not found")
        case 201 => println("Description: Resource created at " + 
                            connection.getHeaderField("Location"))
        case _ =>
      }
      if (connection != null) connection.disconnect()
    }
  }
}

// parser
class Parser(s: String) {
  var videoCount = 0
  var koanCount = 0
  var codetaskCount = 0
  var taskMap = TreeMap[Int, List[Node]]()

  def escapeHTML = (s: String) => s.replace("\n", "\\n").replace("\"", "\\\"").replace("\t", "\\t")
  def inString = (s: String) => "\"" + s + "\""
  
  val video = """video\s*\(\s*(\"\"\"([\s\S]*?)\"\"\"|\"(.+)\")(\s*,?\s*)(\"\"\"(.+)\"\"\"|\"(.+)\")\s*\)""".r
  val koan = """koan\s*\(\s*(\"\"\"([\s\S]*?)\"\"\"|\"(.+)\")(\s*\)\s*\{)""".r
  val codetask = """codetask\s*\(\s*(\"\"\"([\s\S]*?)\"\"\"|\"(.*)\")(\s*\)\s*\{)""".r
  //val assert = """((should\sequal\s*)|(should\s*===\s*)|(should\s*be\s*)|(shouldEqual\s*)|(shouldBe\s*))((\((.*)\))|((.*)))""".r
  //val assert = """((should\sequal\s*)|(should\s*===\s*)|(should\s*be\s*)|(shouldEqual\s*)|(shouldBe\s*))((\((.*)\))|((.*)))""".r
  // regex, solution, replacement
  val assertList = List[(Regex, Int, Match => String)](
    ("(should\\s+((equal)|(==)|(===)|(be)|(eq))\\s*)(\\((.*)\\))".r, 9, {m => m.group(1).toString + "(__)"}),
    ("(should\\s+((equal)|(==)|(===)|(be)|(eq))\\s+)(.*)".r,         8, {m => m.group(1).toString + "__"}),
    ("(should((Equal)|(Be))\\s+)(.*)".r,                             5, {m => m.group(1).toString + "__"}),
    ("(should((Equal)|(Be))\\s+)(\\((.*)\\))".r,                     6, {m => m.group(1).toString + "(__)"}),
    ("(assert\\s*\\(.*((==)|(===)|(eq))\\s+)(.*)(,.*)".r,            6, {m => m.group(1).toString + "__" + m.group(7).toString}),
    ("(assert\\s*\\(.*((==)|(===)|(eq))\\s+)(.*)\\)".r,              6, {m => m.group(1).toString + "__)"})
  )
  val clean = """^\s*(\S[\s\S]*\S)\s*""".r

  def parseVideos {
    val matches = video findAllMatchIn s
    matches.foreach { m =>
      var index = s.indexOf(m.toString)
      
      // prevent overwriting existing map item with same description 
      if (taskMap.contains(index))
        index = s.indexOf(m.toString, index + 1)
      
      val description = if (m.group(3) != null) m.group(3) else m.group(2).stripMargin('|')
      val url = m.group(7)
      videoCount += 1
      
      taskMap = taskMap + (index -> List(
        Node("id",       Some(inString("video" + videoCount))),
        Node("tag",      Some(inString("video-task"))),
        Node("data",     None, Some(List(
          Node("description", Some(inString(escapeHTML(description)))),
          Node("url",         Some(inString(escapeHTML(url))))
        ))),
        Node("solution", Some(inString("watched")))
      ))
    }
  }

   /* Possible asserts in koans
   *                         // asserts must be on one line
   * result should equal (3) // can customize equality
   * result should === (3)   // can customize equality and enforce type constraints
   * result should be (3)    // cannot customize equality, so fastest to compile
   * result shouldEqual 3    // can customize equality, no parentheses required
   * result shouldBe 3       // cannot customize equality, so fastest to compile, no parentheses required
   * */
  def parseKoans {
    val matches = koan findAllMatchIn s
    var index = 0
    matches.foreach { m =>
      index = s.indexOf(m.toString, index)
      
      // prevent overwriting existing map item with same description 
      if (taskMap.contains(index))
        index = s.indexOf(m.toString, index + 1)
      
      koanCount += 1
      
      val description = if (m.group(3) != null) m.group(3) else m.group(2).stripMargin('|')
      val pos = parseCurlyBraces(s, index + m.toString.size - 1)

      // get code and remove whitespace before and after
      var code = ""
      //clean findFirstMatchIn (s.slice(pos._1 + 1, pos._2)) foreach { m2 => code = m2.group(1).toString }
      code = s.slice(pos._1 + 1, pos._2)
      // retrieve all solutions and replace them with __
      var solutions = List[String]()
      
      /*assert findAllMatchIn code foreach { m2 => 
        // get all matched assert types
        val groups = List(2, 3, 4, 5, 6) filter { g => m2.group(g) != null }
        groups foreach { g =>
          var solution = ""
          var replace = "__"
          // get solution from either (__) or __
          if (m2.group(9) != null) {
            solution = m2.group(9).toString();
            replace = "(__)"
          } else {
            solution = m2.group(11).toString();
          }
          solutions = solutions ::: List(solution)
          // replace solution in code
          code = code.replace(m2.toString, m2.group(g).toString() + replace)
        } 
      }*/
     //assertList.foreach { assert =>
      //  assert._1 findAllMatchIn code foreach { am =>
      //    solutions = solutions ::: List(am.group(assert._2))
      //    code = code.replace(am.toString, assert._3(am))
      //  }
      //}
      code.split("\n").foreach { line => 
        var end = false
        var i = 0
        do {
          val assert = assertList(i)
          assert._1 findFirstMatchIn line match {
            case Some(am) => {
              solutions = solutions ::: List(am.group(assert._2))
              code = code.replace(am.toString, assert._3(am))
              end = true
            }
            case None =>
          }
          i = i + 1
        } while(i < assertList.length && !end)
      }

      val solutionWithoutBrackets = solutions.map(x => escapeHTML(x)).mkString(",")
      val solutionWithBrackets = "[%s]".format(solutions.map(x => "\"" + escapeHTML(x) + "\"").mkString(","))

      //println(code)
      //println("---------------------------------------------------------")
      ////val indent = "[ |\t]*".r findFirstMatchIn code
      //println("indent:<" + indent + ">")
      //indent match {
      //  case Some(s) => {
      //    // remove first indentation in each line
      //    code = code.split("\n").map(_.replaceFirst(s.toString, "")).mkString("\n")
      //    println("---------------------------------------------------------")
      //  } 
      //  case None =>
      //}

      //remove empty Lines before and after code
      val empty = "^[ |\t]*$".r
      val lines = code.split("\n")
      var filtered = new ListBuffer[String]()
      var i = 0
      var begin = false
      do {
        if (begin || ((empty findFirstMatchIn lines(i)).isEmpty)) {
          filtered += lines(i)
          begin = true
        }
        i = i + 1
      } while(i < lines.length)

      val newLines = filtered.toList
      filtered = new ListBuffer[String]()
      i = newLines.length - 1
      begin = false
      do {
        if (begin || ((empty findFirstMatchIn newLines(i)).isEmpty)) {
          filtered += newLines(i)
          begin = true
        }
        i = i - 1
      } while(i >= 0)
      val cleanLines = filtered.toList.reverse

      // bringdown indentation
      val indent = "^([ |\t]*)\\S".r
      val indentMatch = indent findFirstMatchIn cleanLines(0)
      val space = indentMatch match {
        case Some(found) => found.group(1)
        case None => ""
      }
      code = cleanLines.map(_.replaceFirst(space, "")).mkString("\n")

      taskMap = taskMap + (index -> List(
        Node("id",       Some(inString("koan" + koanCount))),
        Node("tag",      Some(inString("koan-task"))),
        Node("data",     None, Some(List(
          Node("description", Some(inString(escapeHTML(description)))),
          Node("code",        Some(inString(escapeHTML(code.toString)))),
          Node("mode",        Some(inString("scala"))),
          Node("solutions",   Some(solutionWithBrackets))
        ))),
        Node("solution", Some(inString(solutionWithoutBrackets)))
      ))
      
      // add one so the next match is processed
      index += 1
    }
  }

  def parseCodeTasks {
    val matches = codetask findAllMatchIn s
    var index = 0
    matches.foreach { m =>
      index = s.indexOf(m.toString, index)
      
      // prevent overwriting existing map item with same description 
      if (taskMap.contains(index))
        index = s.indexOf(m.toString, index + 1)
      
      codetaskCount += 1
      
      val description = if (m.group(3) != null) m.group(3) else m.group(2).stripMargin('|')
      val pos = parseCurlyBraces(s, index + m.toString.size - 1)
      var code = s.slice(pos._1 + 1, pos._2)
      
      // get tabtype (should have two tabs)
      var tabType = ""
      """\n(\t*| *)\S""".r findFirstMatchIn code foreach { m2 => tabType = m2.group(1).toString }
      // first indentation should be second level
      if (tabType.size % 2 != 0) 
        tabType = ""
      
      // remove whitespace before and after
      clean findFirstMatchIn code foreach { m2 => code = m2.group(1).toString }
      
      // remove everything between //solve and //endsolve
      val solve = """[\s]*(\/\/solve\s*[\s\S]*?\/\/endsolve)""".r
      val solveMatches = solve findAllMatchIn code
      if (solveMatches.isEmpty) throw MatchException("//solve / //endsolve did not match\n perhaps you are missing one of the two")
      solveMatches.foreach { m2 => code = code.replace(m2.group(1).toString, "//todo") }
      
      // extract and remove everything between //test and //endtest
      val test = """[\s\S]*(\/\/test\s*([\s\S]*)\/\/endtest)""".r
      var testCode = ""
      val testMatches = test findFirstMatchIn code
      if (testMatches.isEmpty) throw MatchException("//test / //endtest did not match\n perhaps you are missing one of the two")
      testMatches.foreach { m2 =>
        testCode = m2.group(2).toString
        code = code.replace(m2.group(1).toString, "")
      }
      
      // remove whitespace
      clean findFirstMatchIn code foreach { m2 => code = m2.group(1).toString }
      clean findFirstMatchIn testCode foreach { m2 => testCode = m2.group(1).toString }

      //println(code)
      //indentation one level down
      if (code.contains("\t") && testCode.contains("\t")) {
        code = code.replace("\n\t\t", "\n")
        testCode = testCode.replace("\n\t\t", "\n")
      } else {
        code = code.replace("\n    ", "\n")
        testCode = testCode.replace("\n    ", "\n") 
      }
      
      taskMap = taskMap + (index -> List(
        Node("id",       Some(inString("code" + codetaskCount))),
        Node("tag",      Some(inString("code-task"))),
        Node("data",     None, Some(List(
          Node("description", Some(inString(escapeHTML(description)))),
          Node("code",        Some(inString(escapeHTML(code.toString)))),
          Node("mode",        Some(inString(escapeHTML("scala"))))
        ))),
        Node("solution", Some(inString(escapeHTML(testCode))))
      ))
      
      // add one so the next match is processed
      index += 1
    }
  }

  // takes an index and counts the
  def parseCurlyBraces(str: String, index: Int): (Int, Int) = {
    var open = 1
    var num = 0
    
    // count braces
    str.takeRight(str.size - index - 1).foreach { char =>
      if (char == '{' && open > 0) open += 1;
      else if (char == '}' && open > 0) {open -= 1; num += 1}
    }
    
    // get index of closing brace
    var end = index
    for (i <- 0 until num) {
      end = str.indexOf('}', end + 1)
    }
    
    (index, end)
  }

  def parseChapter(title: String, id: Long = 1):String = {
    parseVideos
    parseKoans
    parseCodeTasks
    var tasks = taskMap.map{ x => "{%s}".format(x._2.map(_.toString()).mkString(","))}
    var taskArray = "[%s]".format(tasks.mkString(","))
    var chapter = "{\"id\": %d, \"title\": \"%s\", \"tasks\": %s}".format(id, title, taskArray);
    chapter
  }
  
}


def encodeBase64(s: String) = Base64.getEncoder.encodeToString(s.getBytes(StandardCharsets.UTF_8))

def parseCourse(dir: String, title: String): String = {
  var files = Array[java.io.File]()
  try {
    files = new java.io.File(dir).listFiles.filter(_.getName.endsWith(".scala"))
  } catch {
    case e: Exception => println("no or empty directory")
  }
  
  var cId = 0
  val chapters = files.map { file =>
    val r = """([A-Z])[a-z0-9]""".r
    var chapterTitle = file.getName
    chapterTitle = chapterTitle.replace(".scala", "")
    
    // split CamelCase to Camel Case
    val matches = r findAllMatchIn chapterTitle
    matches.foreach { m =>
      val g1 = m.group(1).toString
      chapterTitle = chapterTitle.replace(g1, " " + g1)
    }
    
    // remove first space
    chapterTitle = chapterTitle.replaceAll("^ ", "")
    
    cId = cId + 1
    new Parser(scala.io.Source.fromFile(file).mkString).parseChapter(chapterTitle, cId)
  }

  // build course
  val course = "{\"title\": \"%s\",\"chapters\": [%s]}".format(title, chapters.mkString(","))
  course
}

def help() = {
  println("""
help                                                            | show help
create course "Course Title" /path/to/scala/tests               | create course
update course 100001 "Course Title" /path/to/scala/tests        | update course
delete course 100001                                            | delete course
create course /path/to/file.json                                | create course from json file
update course 100001 /path/to/file.json                         | update course from json file
parse "Course Title" /path/to/scala/tests ./to/file.json        | create json file of course
create user                                                     | create user
update user 200001                                              | update user
delete user 200001                                              | delete user
show users                                                      | show users
show courses                                                    | show courses
  """)
}

def getAuthorization(): (String, String) = {
  val csl = System.console()
  print("username: ")
  val username = csl.readLine()
  print("password: ")
  val password = new String(csl.readPassword())
  (username, password)
}

def createCourseFromDir(title: String, dir: String) = {
  val course = parseCourse(dir, title)

  // ask for password and username
  val auth = getAuthorization()

  HttpR(serverUrl + "/api/courses")
    .data(course)
    .method("POST")
    .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
    .property("content-type", "application/json")
    .send()
}

def createCourseFromFile(filename: String) = {
  try {
    val file = new java.io.File(filename)
    val course = fromFile(file).toString

    // ask for password and username
    val auth = getAuthorization()

    HttpR(serverUrl + "/api/courses")
      .data(course)
      .method("POST")
      .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
      .property("content-type", "application/json")
      .send()
  } catch {
    case e: Exception => println("could not find file " + filename)
  }
}

def updateCourseFromDir(id: String, title:String, dir: String) = {
  val course = parseCourse(dir, title)

  // ask for password and username
  val auth = getAuthorization()

  HttpR(serverUrl + "/api/courses/" + id)
    .data(course)
    .method("PUT")
    .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
    .property("content-type", "application/json")
    .send()
}

def updateCourseFromFile(id: String, filename: String) {
  try {
    val file = new java.io.File(filename)
    val course = fromFile(file).toString

    // ask for password and username
    val auth = getAuthorization()

    HttpR(serverUrl + "/api/courses/" + id)
      .data(course)
      .method("PUT")
      .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
      .property("content-type", "application/json")
      .send()
  } catch {
    case e: Exception => println("could not find file " + filename)
  }
}

def deleteCourse(id: String) {
  val auth = getAuthorization()

  HttpR(serverUrl + "/api/courses/" + id)
    .method("DELETE")
    .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
    .send()
}

def createUser() {
  val csl = System.console()

  print("created username: ")
  val username = csl.readLine()
  print("created authority: ")
  val authority = csl.readLine()
  
  val valid = List("student","teacher","admin").contains(authority)

  if (!valid) {
    println("unknown authority level")
    return
  }

  print("created password: ")
  val password = new String(csl.readPassword())
  print("repeat password: ")
  val password2 = new String(csl.readPassword())

  if (password != password2) {
    println("passwords did not match")
    return
  }
  
  println("authorization")
  val auth = getAuthorization()

  val user: String = "{\"username\": \"" + username + "\", \"authority\": \"" +
    authority + "\", \"password\": \"" + password + "\", \"chapterSolutions\": [], \"subscriptions\": []}"

  HttpR(serverUrl + "/api/users")
    .data(user)
    .method("POST")
    .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
    .property("content-type", "application/json")
    .send()
}

def updateUser(id: String) {
  val csl = System.console()

  print("created username: ")
  val username = csl.readLine()
  print("created authority: ")
  val authority = csl.readLine()
  
  val valid = List("student","teacher","admin").contains(authority)

  if (!valid) {
    println("unknown authority level")
    return
  }

  print("created password: ")
  val password = new String(csl.readPassword())
  print("repeat password: ")
  val password2 = new String(csl.readPassword())

  if (password != password2) {
    println("passwords did not match")
    return
  }
  
  println("authorization")
  val auth = getAuthorization()

  val user: String = "{\"username\": \"" + username + "\", \"authority\": \"" +
    authority + "\", \"password\": \"" + password + "\", \"chapterSolutions\": [], \"subscriptions\": []}"

  HttpR(serverUrl + "/api/users/" + id)
    .data(user)
    .method("PUT")
    .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
    .property("content-type", "application/json")
    .send()
}

def deleteUser(id: String) {
  val auth = getAuthorization()

  HttpR(serverUrl + "/api/users/" + id)
    .method("DELETE")
    .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
    .send()
}

def showUsers() {
  val auth = getAuthorization()

  val r = HttpR(serverUrl + "/api/users/table")
    .method("GET")
    .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
    .send()
    .toString()

  println("")
  println(r)
}

def showCourses() {
  val auth = getAuthorization()

  val r = HttpR(serverUrl + "/api/courses/table")
    .method("GET")
    .property("Authorization", "Basic " + encodeBase64(auth._1 + ":" + auth._2))
    .send()
    .toString()

  println("")
  println(r)
}

if (args.size > 0) {
  try {
    args(0) match {
      case "help" => help()
      case "create" => args(1) match {
        case "course" => 
          if (args.size > 3) createCourseFromDir(args(2), args(3))
          else createCourseFromFile(args(2))
        case "user" => createUser()
        case x => println("unknown command " + x)
      }
      case "update" => args(1) match {
        case "course" =>
          if (args.size > 3) updateCourseFromDir(args(2), args(3), args(4))
          else updateCourseFromFile(args(2), args(3))
        case "user" => updateUser(args(2))
        case x => println("unknown command " + x)
      }
      case "delete" => args(1) match {
        case "course" => deleteCourse(args(2))
        case "user" => deleteUser(args(2))
        case x => println("unknown command " + x)
      }
      case "show" => args(1) match {
        case "users" => showUsers()
        case "courses" => showCourses()
        case x => println("unknown command" + x)
      }
      case x => println("unknown command " + x)
    }
  } catch {
    case e: java.lang.ArrayIndexOutOfBoundsException => println("invalid call")
  }
}